;
;	 Copyright 2013 Anas H. Sulaiman (ahs.pw)
;	
;	 This file is part of Clidoku.
;
;    Clidoku is free software: you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation, either version 3 of the License, or
;    (at your option) any later version.
;
;    Clidoku is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;
;   You should have received a copy of the GNU General Public License
;   along with Clidoku.  If not, see <http://www.gnu.org/licenses/>.

(defrule puzzle-read
	?f <- (phase puzzle-read)
	=>
	(retract ?f)
	(printout t "[1,1]=")
	(assert (cell (id 01) (val (read)) (box 1) (row 1) (col 1) ))
	(printout t "[1,2]=")
	(assert (cell (id 02) (val (read)) (box 1) (row 1) (col 2) ))
	(printout t "[1,3]=")
	(assert (cell (id 03) (val (read)) (box 1) (row 1) (col 3) ))
	(printout t "[2,1]=")
	(assert (cell (id 04) (val (read)) (box 1) (row 2) (col 1) ))
	(printout t "[2,2]=")
	(assert (cell (id 05) (val (read)) (box 1) (row 2) (col 2) ))
	(printout t "[2,3]=")
	(assert (cell (id 06) (val (read)) (box 1) (row 2) (col 3) ))
	(printout t "[3,1]=")
	(assert (cell (id 07) (val (read)) (box 1) (row 3) (col 1) ))
	(printout t "[3,2]=")
	(assert (cell (id 08) (val (read)) (box 1) (row 3) (col 2) ))
	(printout t "[3,3]=")
	(assert (cell (id 09) (val (read)) (box 1) (row 3) (col 3) ))
	(printout t "[1,4]=")
	(assert (cell (id 10) (val (read)) (box 2) (row 1) (col 4) ))
	(printout t "[1,5]=")
	(assert (cell (id 11) (val (read)) (box 2) (row 1) (col 5) ))
	(printout t "[1,6]=")
	(assert (cell (id 12) (val (read)) (box 2) (row 1) (col 6) ))
	(printout t "[2,4]=")
	(assert (cell (id 13) (val (read)) (box 2) (row 2) (col 4) ))
	(printout t "[2,5]=")
	(assert (cell (id 14) (val (read)) (box 2) (row 2) (col 5) ))
	(printout t "[2,6]=")
	(assert (cell (id 15) (val (read)) (box 2) (row 2) (col 6) ))
	(printout t "[3,4]=")
	(assert (cell (id 16) (val (read)) (box 2) (row 3) (col 4) ))
	(printout t "[3,5]=")
	(assert (cell (id 17) (val (read)) (box 2) (row 3) (col 5) ))
	(printout t "[3,6]=")
	(assert (cell (id 18) (val (read)) (box 2) (row 3) (col 6) ))
	(printout t "[1,7]=")
	(assert (cell (id 19) (val (read)) (box 3) (row 1) (col 7) ))
	(printout t "[1,8]=")
	(assert (cell (id 20) (val (read)) (box 3) (row 1) (col 8) ))
	(printout t "[1,9]=")
	(assert (cell (id 21) (val (read)) (box 3) (row 1) (col 9) ))
	(printout t "[2,7]=")
	(assert (cell (id 22) (val (read)) (box 3) (row 2) (col 7) ))
	(printout t "[2,8]=")
	(assert (cell (id 23) (val (read)) (box 3) (row 2) (col 8) ))
	(printout t "[2,9]=")
	(assert (cell (id 24) (val (read)) (box 3) (row 2) (col 9) ))
	(printout t "[3,7]=")
	(assert (cell (id 25) (val (read)) (box 3) (row 3) (col 7) ))
	(printout t "[3,8]=")
	(assert (cell (id 26) (val (read)) (box 3) (row 3) (col 8) ))
	(printout t "[3,9]=")
	(assert (cell (id 27) (val (read)) (box 3) (row 3) (col 9) ))
	(printout t "[4,1]=")
	(assert (cell (id 28) (val (read)) (box 4) (row 4) (col 1) ))
	(printout t "[4,2]=")
	(assert (cell (id 29) (val (read)) (box 4) (row 4) (col 2) ))
	(printout t "[4,3]=")
	(assert (cell (id 30) (val (read)) (box 4) (row 4) (col 3) ))
	(printout t "[5,1]=")
	(assert (cell (id 31) (val (read)) (box 4) (row 5) (col 1) ))
	(printout t "[5,2]=")
	(assert (cell (id 32) (val (read)) (box 4) (row 5) (col 2) ))
	(printout t "[5,3]=")
	(assert (cell (id 33) (val (read)) (box 4) (row 5) (col 3) ))
	(printout t "[6,1]=")
	(assert (cell (id 34) (val (read)) (box 4) (row 6) (col 1) ))
	(printout t "[6,2]=")
	(assert (cell (id 35) (val (read)) (box 4) (row 6) (col 2) ))
	(printout t "[6,3]=")
	(assert (cell (id 36) (val (read)) (box 4) (row 6) (col 3) ))
	(printout t "[4,4]=")
	(assert (cell (id 37) (val (read)) (box 5) (row 4) (col 4) ))
	(printout t "[4,5]=")
	(assert (cell (id 38) (val (read)) (box 5) (row 4) (col 5) ))
	(printout t "[4,6]=")
	(assert (cell (id 39) (val (read)) (box 5) (row 4) (col 6) ))
	(printout t "[5,4]=")
	(assert (cell (id 40) (val (read)) (box 5) (row 5) (col 4) ))
	(printout t "[5,5]=")
	(assert (cell (id 41) (val (read)) (box 5) (row 5) (col 5) ))
	(printout t "[5,6]=")
	(assert (cell (id 42) (val (read)) (box 5) (row 5) (col 6) ))
	(printout t "[6,4]=")
	(assert (cell (id 43) (val (read)) (box 5) (row 6) (col 4) ))
	(printout t "[6,5]=")
	(assert (cell (id 44) (val (read)) (box 5) (row 6) (col 5) ))
	(printout t "[6,6]=")
	(assert (cell (id 45) (val (read)) (box 5) (row 6) (col 6) ))
	(printout t "[4,7]=")
	(assert (cell (id 46) (val (read)) (box 6) (row 4) (col 7) ))
	(printout t "[4,8]=")
	(assert (cell (id 47) (val (read)) (box 6) (row 4) (col 8) ))
	(printout t "[4,9]=")
	(assert (cell (id 48) (val (read)) (box 6) (row 4) (col 9) ))
	(printout t "[5,7]=")
	(assert (cell (id 49) (val (read)) (box 6) (row 5) (col 7) ))
	(printout t "[5,8]=")
	(assert (cell (id 50) (val (read)) (box 6) (row 5) (col 8) ))
	(printout t "[5,9]=")
	(assert (cell (id 51) (val (read)) (box 6) (row 5) (col 9) ))
	(printout t "[6,7]=")
	(assert (cell (id 52) (val (read)) (box 6) (row 6) (col 7) ))
	(printout t "[6,8]=")
	(assert (cell (id 53) (val (read)) (box 6) (row 6) (col 8) ))
	(printout t "[6,9]=")
	(assert (cell (id 54) (val (read)) (box 6) (row 6) (col 9) ))
	(printout t "[7,1]=")
	(assert (cell (id 55) (val (read)) (box 7) (row 7) (col 1) ))
	(printout t "[7,2]=")
	(assert (cell (id 56) (val (read)) (box 7) (row 7) (col 2) ))
	(printout t "[7,3]=")
	(assert (cell (id 57) (val (read)) (box 7) (row 7) (col 3) ))
	(printout t "[8,1]=")
	(assert (cell (id 58) (val (read)) (box 7) (row 8) (col 1) ))
	(printout t "[8,2]=")
	(assert (cell (id 59) (val (read)) (box 7) (row 8) (col 2) ))
	(printout t "[8,3]=")
	(assert (cell (id 60) (val (read)) (box 7) (row 8) (col 3) ))
	(printout t "[9,1]=")
	(assert (cell (id 61) (val (read)) (box 7) (row 9) (col 1) ))
	(printout t "[9,2]=")
	(assert (cell (id 62) (val (read)) (box 7) (row 9) (col 2) ))
	(printout t "[9,3]=")
	(assert (cell (id 63) (val (read)) (box 7) (row 9) (col 3) ))
	(printout t "[7,4]=")
	(assert (cell (id 64) (val (read)) (box 8) (row 7) (col 4) ))
	(printout t "[7,5]=")
	(assert (cell (id 65) (val (read)) (box 8) (row 7) (col 5) ))
	(printout t "[7,6]=")
	(assert (cell (id 66) (val (read)) (box 8) (row 7) (col 6) ))
	(printout t "[8,4]=")
	(assert (cell (id 67) (val (read)) (box 8) (row 8) (col 4) ))
	(printout t "[8,5]=")
	(assert (cell (id 68) (val (read)) (box 8) (row 8) (col 5) ))
	(printout t "[8,6]=")
	(assert (cell (id 69) (val (read)) (box 8) (row 8) (col 6) ))
	(printout t "[9,4]=")
	(assert (cell (id 70) (val (read)) (box 8) (row 9) (col 4) ))
	(printout t "[9,5]=")
	(assert (cell (id 71) (val (read)) (box 8) (row 9) (col 5) ))
	(printout t "[9,6]=")
	(assert (cell (id 72) (val (read)) (box 8) (row 9) (col 6) ))
	(printout t "[7,7]=")
	(assert (cell (id 73) (val (read)) (box 9) (row 7) (col 7) ))
	(printout t "[7,8]=")
	(assert (cell (id 74) (val (read)) (box 9) (row 7) (col 8) ))
	(printout t "[7,9]=")
	(assert (cell (id 75) (val (read)) (box 9) (row 7) (col 9) ))
	(printout t "[8,7]=")
	(assert (cell (id 76) (val (read)) (box 9) (row 8) (col 7) ))
	(printout t "[8,8]=")
	(assert (cell (id 77) (val (read)) (box 9) (row 8) (col 8) ))
	(printout t "[8,9]=")
	(assert (cell (id 78) (val (read)) (box 9) (row 8) (col 9) ))
	(printout t "[9,7]=")
	(assert (cell (id 79) (val (read)) (box 9) (row 9) (col 7) ))
	(printout t "[9,8]=")
	(assert (cell (id 80) (val (read)) (box 9) (row 9) (col 8) ))
	(printout t "[9,9]=")
	(assert (cell (id 81) (val (read)) (box 9) (row 9) (col 9) ))
)
